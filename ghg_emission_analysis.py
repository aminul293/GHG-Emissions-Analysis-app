# -*- coding: utf-8 -*-
"""GHG_emission_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L83N8fqAD_Na6o1FdjrPAHKUf0RzE2di
"""

!pip install jupyter-dash pandas plotly

from google.colab import files
uploaded = files.upload()

# Import necessary libraries
from dash import Dash, dcc, html
from dash.dependencies import Input, Output
import pandas as pd
import plotly.express as px

# Load the data
file_path = "GHGs_by_Sector_and_State_2012-2020.xlsx"
excel_data = pd.ExcelFile(file_path)
ghg_data = excel_data.parse('Main')
sector_mapping = excel_data.parse('Sectors')

# Merge sector names for readability
ghg_data = ghg_data.merge(sector_mapping, on="Sector", how="left")
ghg_data.dropna(inplace=True)

# Create Dash app
app = Dash(__name__)

# App layout
app.layout = html.Div([
    html.H1("GHG Emissions Analysis Dashboard", style={"textAlign": "center", "color": "darkblue"}),

    # Dropdown filters
    html.Div([
        html.Label("Select State:", style={"fontSize": "20px"}),
        dcc.Dropdown(
            id='state_dropdown',
            options=[{'label': state, 'value': state} for state in ghg_data['State'].unique()],
            value='CA',  # Default value
            multi=False,
            style={"width": "50%"}
        ),
    ]),

    html.Div([
        html.Label("Select Year:", style={"fontSize": "20px"}),
        dcc.Dropdown(
            id='year_dropdown',
            options=[{'label': year, 'value': year} for year in sorted(ghg_data['Year'].unique())],
            value=2016,  # Default year
            multi=False,
            style={"width": "50%"}
        ),
    ]),

    # Visualization: Top States by Emissions
    html.Div([
        html.H2("Top States by Greenhouse Gas Emissions", style={"textAlign": "center", "color": "teal"}),
        dcc.Graph(id="top_states_chart")
    ]),

    # Visualization: Emissions by Year
    html.Div([
        html.H2("Emissions Trend Over Time", style={"textAlign": "center", "color": "purple"}),
        dcc.Graph(id="emissions_trend_chart")
    ]),

    # Visualization: Sector Contribution
    html.Div([
        html.H2("Emissions by Sector", style={"textAlign": "center", "color": "orange"}),
        dcc.Graph(id="sector_chart")
    ])
])

# Callbacks for interactivity
@app.callback(
    Output('top_states_chart', 'figure'),
    Output('emissions_trend_chart', 'figure'),
    Output('sector_chart', 'figure'),
    [Input('state_dropdown', 'value'),
     Input('year_dropdown', 'value')]
)
def update_charts(selected_state, selected_year):
    # Top States Chart
    top_states = ghg_data.groupby('State')['FlowAmount'].sum().nlargest(10).reset_index()
    top_states_chart = px.bar(top_states, x="State", y="FlowAmount",
                              color="State", title="Top 10 States by Emissions",
                              template="plotly_dark")

    # Emissions Trend Chart
    trend_data = ghg_data[ghg_data['State'] == selected_state].groupby('Year')['FlowAmount'].sum().reset_index()
    emissions_trend_chart = px.line(trend_data, x="Year", y="FlowAmount",
                                    title=f"Emissions Trend for {selected_state}",
                                    markers=True, template="ggplot2")

    # Sector Contribution Chart
    sector_data = ghg_data[ghg_data['Year'] == selected_year].groupby('SectorName')['FlowAmount'].sum().reset_index()

    # Combine smaller sectors into "Other"
    threshold = 0.02 * sector_data['FlowAmount'].sum()  # 2% threshold
    sector_data['Category'] = sector_data['FlowAmount'].apply(lambda x: 'Other' if x < threshold else x)
    sector_data = sector_data.groupby('Category').sum().reset_index()

    # Create the pie chart
    sector_chart = px.pie(
        sector_data,
        names="Category",
        values="FlowAmount",
        title=f"Sector Contribution in {selected_year}",
        template="seaborn",
        color_discrete_sequence=px.colors.sequential.Viridis
    )

    return top_states_chart, emissions_trend_chart, sector_chart

# Run the app (Colab-specific external link)
app.run_server(debug=True, host='0.0.0.0', port=8060)